#+Startup: overview
#+Title: My emacs config file
#+Creator: Mário Sousa
#+Language: en (mostly)
#+OPTIONS: num:nil

* Macros
** Remap Macros s-[F3] and s-[F4]
#+begin_src emacs-lisp
  ;; (global-set-key [f3] 'shell)
  (global-set-key (kbd "<s-f3>") 'start-kbd-macro)
  (global-set-key (kbd "<s-f4>") 'end-kbd-macro)
#+end_src

** Increment numbers
Starting a macro with S-[F2] will create a counter at a place where you press again S-[F2]
#+begin_src emacs-lisp
  (global-set-key (kbd "<s-f2>") 'kmacro-start-macro-or-insert-counter)
#+end_src


** Macro definition
S-[f3]
define macro
S-[f4]

** Execute macro
*** Run once
C-x e
*** Run again
e (just press 'e')
*** Run 'eternal'
C-u 0 C-x e

** Save macro
To be used after defining macro
*** Run 
M-x name-last-kbd-macro
_Name:_ my-macro [enter]
*** Recover saved macro (use it as a function)
M-x my-macro
Closing emacs, the macro will disapear unless...
*** Save macro 'eternal'
M-x insert-kbd-macro
_Name:_ my-macro [enter]

This will give the text to add to emacs-lisp:
(fset 'my-macro
  [ LIST OF COMMANDS USED TO CREATE MACRO]
)
This binds the macro for future sessions	     

 * Minor settings
** clock
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+end_src
** Show line and code line
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
** TODO Using subWords
Setup in program mode
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src
** Remove GUI elements
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (setq inhibit-startup-message t)
#+end_src

** No backup option
This will remove the production of backups. I have it commented because it helped me in the past.
#+begin_src emacs-lisp
  ;; For consideration 
  ;; (setq make-backup-file nil)
  ;; (setq auto-save-default nil)
#+end_src

** Alias to use y-and-n instead
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** No bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Pretty symbols
Something to test: not sure I like it.
#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

** Line highlight
Looks ok. Considering.
#+begin_src emacs-lisp
  (when window-system (global-hl-line-mode t))
#+end_src

** Continuous scrolling
At top and bottom it does not jump a frame
#+begin_src emacs-lisp
  (setq scroll-conservatively 300)
#+end_src

** Parenthesis electrical
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\) )
			      (?\[ . ?\] )
			      (?\{ . ?\} )
			      (?\" . ?\" )
			      ))
  (modify-syntax-entry ?< ".")
  (modify-syntax-entry ?> ".")
  (electric-pair-mode t)
#+end_src

** TODO hungry-delete
There might be a way to toogle the behaviour but did not find. If not useful, we can always manually disable it.
#+begin_src emacs-lisp
    (use-package hungry-delete
      :ensure t
      :config (global-hungry-delete-mode)
      ;; :bind
      ;; ("C-«" . c-toogle-hungry-state)
  )
#+end_src
* Terminal
** Setting default shell to bash


#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

#+end_src

* Org
** Activate org-tempo


#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
** Basic config
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp"))
#+end_src




#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src emacs-lisp

** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode))))
#+end_src 

** Org ident
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src
* Which key
#+begin_src emacs-lisp
  (use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src

* Beacon
#+begin_src emacs-lisp
  (use-package beacon
  :ensure t
  :init
  (beacon-mode 1)) 
#+end_src
* IDO
** enable ido mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** ido-vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

** smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src

** switch buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+end_src

** TODO Ido-root
This needs some work. Let me check if it works with macros
#+begin_src emacs-lisp
;;  (global-set-key (kbd "C-x C-a") (kbd "C-x C-f C-e C-a C-k"))
#+end_src
* Buffers
** killall buffers
#+begin_src emacs-lisp
  (defun killall-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'killall-buffers)
#+end_src
** kill current buffer
#+begin_src emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+end_src
** enable buffers
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** expert mode
#+begin_src emacs-lisp
  (setq ibuffer-expert t)
#+end_src
* Avy
#+Begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

* Config edit/reload
** edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c C-c C-e") 'config-visit)
#+end_src

** reload config
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (with-eval-after-load 'org
    (bind-key "C-c r" 'config-reload))
  ;; (local-set-key (kbd "C-c r") 'config-reload)
#+end_src

* Rainbow mode
** activate rainbow mode
This gives HTML color code
# #+begin_src emacs-lisp
#   (use-package rainbow-mode
#     :ensure t
#     :init (add-hook 'prog-mode-hook 'rainbow-mode)
# #+end_src


#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    ;; (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (rainbow-delimiters-mode 1)
    )
#+end_src

* Window splitting functions
** vertical
#+begin_src emacs-lisp
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

** Horizontal
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
#+end_src

* Repeat mode enabeling
Allows to repeat the previous command without using the C- or M- of S-
#+begin_src emacs-lisp
;;  (repeat-mode)
#+end_src

* Using winum mode
#+begin_src emacs-lisp
  (use-package winum
    :ensure
    :config
    (global-set-key (kbd "M-0") 'treemacs-select-window)
    (global-set-key (kbd "M-1") 'winum-select-window-1)
    (global-set-key (kbd "M-2") 'winum-select-window-2)
    (global-set-key (kbd "M-3") 'winum-select-window-3)
    (global-set-key (kbd "M-4") 'winum-select-window-4)
    (global-set-key (kbd "M-5") 'winum-select-window-5)
    (global-set-key (kbd "M-6") 'winum-select-window-6)
    (global-set-key (kbd "M-7") 'winum-select-window-7)
    (global-set-key (kbd "M-8") 'winum-select-window-8)
    (winum-mode))
#+end_src

* Treemacs
Something to test
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :bind ("s-t" . treemacs))
#+end_src

* Sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-s-e" . sudo-edit))
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-banner-logo-title "Welcome to my livEmacs!")
    )
#+end_src

* Space line
** spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src
* diminish
(diminish 'company-mode) --> removed.
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'visual-line-mode)
    )
#+end_src

* dmenu
#+begin_src emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-x" . 'dmenu))
#+end_src

* Mark-multiple
#+begin_src emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+end_src

* Swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :config (global-set-key (kbd "s-r") 'swiper))
#+end_src

* TODO EXWM
This will be use to manage the entire session. Not confortable yet.
Tested and it did not work :(
#  #+begin_src emacs-lisp
#   (use-package exwm
#     :ensure t
#     :config
#     (require 'exwm-config)
#     (exwm-config-default))
# #+end_src
What is system tray ?
# #+begin_src emacs-lisp
#   (require 'exwm-systemtray)
#   (exwm-systemtray-enable)
# #+end_src
# #+begin_src emacs-lisp
#   (global-set-key (kbd "s-k") 'exwm-workspace-delete)
#   (global-set-key (kbd "s-w") 'exwm-workspace-swap))
# #+end_src



* My personal aliases
** [F3] Open terminal
[F3] Recently switch from 'shell (my default for years) to ansi-term. Let's see how it goes...
#+begin_src emacs-lisp
  ;; (global-set-key [f3] 'shell)
  (global-set-key [f3] 'ansi-term)
#+end_src

** [F4] Go to line
 All the "known" way to go to line do not work so I am using this one:
#+begin_src emacs-lisp
  (global-set-key [f4] 'goto-line)
#+end_src

** [F5] Find and replace
#+begin_src emacs-lisp
  (global-set-key [f5] 'query-replace)
#+end_src

** [F6] and [F7] kill and yank rectangle
#+begin_src emacs-lisp
(global-set-key [f6] "\M-x kill-rectangle")
(global-set-key [f7] "\M-x yank-rectangle")
#+end_src
** Visual-line-mode
#+begin_src emacs-lisp
(global-set-key (kbd "<C-f2>") 'visual-line-mode)
#+end_src
** [F8] and [F9] for comment and uncomment
#+begin_src emacs-lisp
  (global-set-key [f8] 'comment-region)
  (global-set-key [f9] 'uncomment-region)
#+end_src

** TODO [F12] Close any Latex enviroment
Maybe there is a way to remove "Latex" and really close any enviroment. To be checked.
#+begin_src emacs-lisp
  (global-set-key [f12] 'LaTeX-close-environment)
#+end_src

** "M-n" Hiiiiiiipie expand
This is probably something I do even more than go-to-line
M-n breaks with company. Attemped map with C-q (closer with the pinky-emacs check) and M-q (further apart)
#+begin_src emacs-lisp
  ;; (global-set-key "M-n" 'hippie-expand)
  (keymap-global-set "C-q" #'hippie-expand)
  (keymap-global-set "M-q" #'hippie-expand)
#+end_src


* Auto complete company
** company top

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    )

#+end_src

** Irony for C and C++

#+begin_src emacs-lisp

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony)
    )

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-node-mode 'irony-mode)
    (add-hook 'c-node-mode 'irony-mode)
    ;; (add-hook 'python-mode-hook 'irony-mode)

    (add-hook 'irony-node-mode 'irony-cdb-autosetup-compile-options)
    )


  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode)
     ;; (add-hook 'python-mode-hook 'company-mode)
    )
  
#+end_src

** Jedy for python

#+begin_src emacs-lisp

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))

  (use-package epc
    :ensure t)

  (use-package python-environment
    :ensure t)

  (use-package deferred
    :ensure t)

  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)

  (with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode)
    )

#+end_src

* Yasnippet
** Main
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+end_src

** emacs lisp config
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+end_src

** python config
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'yas-minor-mode)
#+end_src

** Modes to discover [%]
*** DONE C and C# [%]
[ X ] c-mode
[ X ] cc-mode
[ X ] c-lang-mode
[ X ] csharp-mode
[ X ] csharp-ts-mode
[ X ] c-lang-common

*** DONE Cpp/C++
[] cpp-omnet-mode
[] c++-mode
[] c++-ts-mode

*** DONE Python
[] julia-mode
[] julia-ts-mode
*** DONE emacs-lisp
*** TODO cmake
[] cmake-mode
[] makefile-automake-mode
[] make-backup-file
[] makefile-gmake-mode
[] makefile-bsdmake-mode
[] makefile-mode

*** TODO latex-mode
*** TODO Bash
[] sh-mode
[] sh-ts-mode

*** Others [%]:
**** TODO PHP
[] php-mode
[] php-ts-mode
**** TODO sql-mode
**** TODO yaml-mode
*** Location /home/sargedas/.emacs.d/elpa/yasnippet-snippets-20241207.2221/snippets
* Hide show mode
** M-[F9]: Activate hs mode
#+begin_src emacs-lisp
  (global-set-key (kbd "M-<f9>") 'hs-minor-mode)
#+end_src

** S-[F9]: Toogle hs hidding in block
#+begin_src emacs-lisp
  (global-set-key (kbd "s-<f9>") 'hs-toggle-hiding)
#+end_src

** S-[F5]: Hide all blocks in the file
#+begin_src emacs-lisp
  (global-set-key (kbd "s-<f5>") 'hs-hide-all)
#+end_src

** S-[F6]: Hide current block
#+begin_src emacs-lisp
  (global-set-key (kbd "s-<f6>") 'hs-hide-block)
#+end_src

** S-[F7]: Show current block
#+begin_src emacs-lisp
  (global-set-key (kbd "s-<f7>") 'hs-show-block)
#+end_src

** S-[F8]: Show all blocks
#+begin_src emacs-lisp
  (global-set-key (kbd "s-<f8>") 'hs-show-all)
#+end_src
